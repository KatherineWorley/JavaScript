Coding - 
	JavaScript. Focus on conceptual understanding. 

Algorithms - 
		Bottom-up approach: 
		Top-down approach:
		How can you improve/change it? 
		Sorting:
		Plus Searching:
		Binary Search:
		Divide-and-conquer:
		Dynamic Programming/Memorization:
		Greediness:
		Recursion:
		Algorithms linked to a specific data structure:
		Big-O notation/Run-Time: 
			1. https://www.youtube.com/watch?v=v4cd1O4zkGw
			2. http://bigocheatsheet.com/
	Discuss complex algorithms like:
		1. Dijkstra - https://www.youtube.com/watch?v=GazC3A4OQTE
		2. A* (A Star) - https://www.youtube.com/watch?v=ySN5Wnu88nE

Sorting - 
	insertion-sort; https://www.youtube.com/watch?v=JU767SDMDvA
	radix-sort:
	QuickSort:https://www.youtube.com/watch?v=SLauY6PpjW4
	MergeSort:
	HeapSort:

Data structures-
		Arrays:
			var fruits = ['Apple', 'Banana', 'Mango'];
			var numbers = [1, 2, 3, 4];
			var vegetables = ['Cabbage', 'Turnip', 'Radish', 'Carrot'];
			var elements = ['this is the first element', 'this is the second element', 'this is the last element'];
			var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010];
			var board = [ 
				  ['R','N','B','Q','K','B','N','R'],
				  ['P','P','P','P','P','P','P','P'],
				  [' ',' ',' ',' ',' ',' ',' ',' '],
				  [' ',' ',' ',' ',' ',' ',' ',' '],
				  [' ',' ',' ',' ',' ',' ',' ',' '],
				  [' ',' ',' ',' ',' ',' ',' ',' '],
				  ['p','p','p','p','p','p','p','p'],
				  ['r','n','b','q','k','b','n','r'] ];
		Linked Lists:
		Stacks:
		Queues:
		Hash-sets: var hashset = new HashSet(1, '1', [1]);
		Hash-maps:
		Hash-Tables:
		Dictionary:
		Trees:
		Binary Trees:
		Heaps:
		Graphs:
	What algorithms tend to work with each data structure?

Mathematics-
	Basic discrete Math Questions:
	Counting Problems:
	Probability Problems:
	Discrete Math 101:
	n-Choose-k problems: 
	ilk:

Graphs:
	Can a problem be applied with a graph algorithm?
	For example: 
		1. Distance
		2. Search
		3. Connectivity
		4. Cycle-detection

	Three basic ways to represent a graph in memory, what are they and their pros/cons? 
		1. Objects and pointers
		2. Matrix
		3. Adjacency List

	Know Computational complexity, their tradeoffs and how to implement them in real code. 
		Basic graph traversal algorithms
		Breadth-first search
		depth-first search

Recursion:
	Thinking Recursively
	Coding in a recursive solution
	How can you use recursion to find a more elegant solution to problems that can be solved iteratively? 

Web Front End:
	Front End Latency
	Implementation of Standard CS Algorithms Useing idomatic JavaScript
	Idomatic JavaScript:

Articulate JavaScript Strengths and Shortcomings
		Pros of JavaScript:
		1. It's a front and back end lanugage. 
		2. It's everywhere. Websites, PDFs, software (Adobe), build scripts/trigger events. 
		3. Event Handlers/Trigger events, click, mouse over, key down... 
		4. Can completed math functions/turing complete language. 
		5. It can accept and manipulate data within the DOM of a brower to be used for an additional purpose. 

		Cons of JavaScript:
		1. User has the ability to turn it off/Functionality in control of user 
		2. Since it's a client-side language, it can be used for malice intent. 
		3. JavaScript can be interpreted differently within different browsers. 

	Be ready to talk about anything listed below: 
			1. Web Security issues 
					XSS
					XSRF
			2. Prototypal Inheritance
			3. DOM API & Manipulation
			4. CSS Manipulation
			5. Browser/DOM events and event handling
			6. XHR Request & HTTP Headers
			7. JavaScript Closures

Front End/Mobile Design:
	Web App:
	Mobile App:
	API Design (Where front end and back end meet):